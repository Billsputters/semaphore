define EXE

$(eval $(call _EXE,$1,main,$(addprefix main/,$2),$(LDFLAGS)))

endef

define TEST_EXE

$(eval $(call _EXE,$1,test,$2,$(TEST_LDFLAGS)))

endef

define OBJ

$(eval $(call _OBJ,$1,main,$(CFLAGS)))

endef

define TEST_OBJ

$(eval $(call _OBJ,$1,test,$(TEST_CFLAGS)))

endef

define OBJ_H

$(eval $(call _OBJ_H,$1,main))

endef

# $1 -- target (without .c suffix)
# $2 -- prerequisites (space-separated list without suffixes)
define DEP_OBJ

$(eval $(call _DEP_OBJ,$1,main,$(addprefix main/,$2)))

endef

define TEST_DEP_OBJ

$(eval $(call _DEP_OBJ,$1,main,$2))

endef

# private templates

# $1 -- filename (without .c suffix)
# $2 -- directory (main or test)
# $3 -- component list
# $4 -- ldflags
define _EXE

build/$2/$1: $(addsuffix .o,$(addprefix build/,$3)) | build/$2
	$(CC) -o $$@ $$^ $4

endef

# Compile .c to .o (without any header file).
# This is mostly applicable to objects with a main() function
# since they have no associated header file.
#
# $1 -- filename (without .c suffix)
# $2 -- directory (main or test)
# $3 -- cflags
define _OBJ

build/$2/$1.o: src/$2/$1.c | build/$2
	$(CC) -o $$@ -c $$< $3

endef

# Compile .c to .o with dependency on .h
#
# $1 -- filename (without .c suffix)
# $2 -- directory (main or test)
define _OBJ_H

$(eval $(call OBJ,$1))

build/$2/$1.o: src/$2/$1.h

endef

# $1 -- target (without .c suffix)
# $2 -- directory (main or test)
# $3 -- prerequisites (space-separated list without suffixes)
define _DEP_OBJ

build/$2/$1.o: $(addsuffix .o,$(addprefix build/,$3))

endef

# $1 -- target (without .c suffix)
# $2 -- prerequisites (space-separated list without suffixes)
define DEP_HEADER

build/main/$1.o: $(addsuffix .h,$(addprefix src/main/,$2))

endef
